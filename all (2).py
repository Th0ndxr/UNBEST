import discord
from discord.ext import commands
from discord import app_commands
import json, random, os
from datetime import datetime

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

GACHA_COST = 5
ADMIN_ROLE_NAME = "Admin Gacha"
ANNOUNCE_CHANNEL_ID = 1359800062628069517  # ‡πÉ‡∏™‡πà Channel ID ‡∏à‡∏£‡∏¥‡∏á

RARITY_ROLES = {
    "SSR": "1%",
    "SR": "5%",
    "S": "10%",
    "R": "30%"
}

GACHA_POOL = [
    {"item": "1%", "rarity": "SSR", "rate": 1},
    {"item": "5%", "rarity": "SR", "rate": 5},
    {"item": "10%", "rarity": "S", "rate": 10},
    {"item": "30%", "rarity": "R", "rate": 21},
    {"item": "‡πÄ‡∏Å‡∏•‡∏∑‡∏≠", "rarity": "N", "rate": 21},
    {"item": "‡πÄ‡∏Å‡∏•‡∏∑‡∏≠", "rarity": "N", "rate": 21},
    {"item": "‡πÄ‡∏Å‡∏•‡∏∑‡∏≠", "rarity": "N", "rate": 21}
]

def load_userdata():
    if not os.path.exists("userdata.json"):
        return {}
    with open("userdata.json", "r", encoding="utf-8") as f:
        return json.load(f)

def save_userdata(data):
    with open("userdata.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def roll_item():
    roll = random.randint(1, 100)
    total = 0
    for i in GACHA_POOL:
        total += i["rate"]
        if roll <= total:
            return i
    return GACHA_POOL[-1]

@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"‚úÖ ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß: {bot.user}")

@bot.tree.command(name="gacha", description="‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏ä‡∏≤")
async def gacha(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    data = load_userdata()

    if user_id not in data or data[user_id]["balance"] < GACHA_COST:
        await interaction.response.send_message("‚ùå ‡∏û‡∏≠‡∏¢‡πå‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠!", ephemeral=True)
        return

    data[user_id]["balance"] -= GACHA_COST
    data[user_id]["gacha_count"] = data[user_id].get("gacha_count", 0) + 1

    result = roll_item()
    data[user_id].setdefault("gacha_history", []).append({
        "item": result["item"],
        "rarity": result["rarity"],
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

    role_name = RARITY_ROLES.get(result["rarity"])
    if role_name:
        role = discord.utils.get(interaction.guild.roles, name=role_name)
        if role:
            await interaction.user.add_roles(role)
            role_msg = f"\nüéñÔ∏è ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®: {role.mention}"
        else:
            role_msg = f"\n‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Role `{role_name}`"
    else:
        role_msg = ""

    announce_channel = bot.get_channel(ANNOUNCE_CHANNEL_ID)
    if announce_channel:
        await announce_channel.send(
            f"üì¢ {interaction.user.mention} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö **{result['item']}** ({result['rarity']}) ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏ä‡∏≤!"
        )

    save_userdata(data)
    await interaction.response.send_message(
        f"üéâ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏ä‡∏≤‡πÑ‡∏î‡πâ: **{result['item']}** ({result['rarity']})!{role_msg}",
        ephemeral=False
    )

# ‚úÖ /gacha10 (‡∏™‡∏∏‡πà‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
@bot.tree.command(name="gacha10", description="‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏ä‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
@app_commands.describe(times="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10)")
async def multi_gacha(interaction: discord.Interaction, times: int):
    if times < 1 or times > 10:
        await interaction.response.send_message("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-10", ephemeral=True)
        return

    user_id = str(interaction.user.id)
    data = load_userdata()
    cost = times * GACHA_COST

    if user_id not in data or data[user_id]["balance"] < cost:
        await interaction.response.send_message("‚ùå ‡∏û‡∏≠‡∏¢‡∏ó‡πå‡πÑ‡∏°‡πà‡∏û‡∏≠", ephemeral=True)
        return

    data[user_id]["balance"] -= cost
    data[user_id]["gacha_count"] = data[user_id].get("gacha_count", 0) + times

    pulls, granted_roles = [], set()
    for _ in range(times):
        result = roll_item()
        pulls.append(f"- **{result['item']}** ({result['rarity']})")
        data[user_id].setdefault("gacha_history", []).append({
            "item": result["item"],
            "rarity": result["rarity"],
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        role_name = RARITY_ROLES.get(result["rarity"])
        if role_name:
            granted_roles.add(role_name)

    role_msgs = []
    for role_name in granted_roles:
        role = discord.utils.get(interaction.guild.roles, name=role_name)
        if role:
            await interaction.user.add_roles(role)
            role_msgs.append(f"üéñÔ∏è ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®: {role.mention}")
        else:
            role_msgs.append(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Role `{role_name}`")

    save_userdata(data)
    await interaction.response.send_message(
        f"üéâ ‡∏™‡∏∏‡πà‡∏° {times} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÑ‡∏î‡πâ:\n" + "\n".join(pulls) + "\n\n" + "\n".join(role_msgs),
        ephemeral=False
    )

# ‚úÖ /point (‡πÄ‡∏ä‡πá‡∏Ñ‡∏û‡∏≠‡∏¢‡∏ó‡πå)
@bot.tree.command(name="point", description="‡πÄ‡∏ä‡πá‡∏Ñ‡∏û‡∏≠‡∏¢‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
async def check_point(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    data = load_userdata()
    balance = data.get(user_id, {}).get("balance", 0)
    gacha_count = data.get(user_id, {}).get("gacha_count", 0)
    history = data.get(user_id, {}).get("history", [])
    total_topup = sum(h.get("amount", 0) for h in history if h.get("type") == "topup")

    await interaction.response.send_message(
        f"üìä **Check Point**\nüí∏ ‡∏û‡∏≠‡∏¢‡∏ó‡πå: `{balance}` ‡∏ö‡∏≤‡∏ó\nüí∞ ‡πÄ‡∏ï‡∏¥‡∏°‡∏£‡∏ß‡∏°: `{total_topup}` ‡∏ö‡∏≤‡∏ó\nüé≤ ‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß: `{gacha_count}` ‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        ephemeral=True
    )

# ‚úÖ /admin (‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö‡∏û‡∏≠‡∏¢‡∏ó‡πå ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥)
@bot.tree.command(name="admin", description="üõ† ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö‡∏û‡∏≠‡∏¢‡∏ó‡πå + ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥")
@app_commands.describe(
    action="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥",
    member="‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
    amount="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏≠‡∏¢‡∏ó‡πå"
)
@app_commands.choices(action=[
    app_commands.Choice(name="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏≠‡∏¢‡∏ó‡πå", value="add"),
    app_commands.Choice(name="‡∏•‡∏ö‡∏û‡∏≠‡∏¢‡∏ó‡πå", value="remove"),
    app_commands.Choice(name="‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥", value="history")
])
async def admin_manage(interaction: discord.Interaction, action: app_commands.Choice[str], member: discord.Member, amount: int = 0):
    if ADMIN_ROLE_NAME not in [role.name for role in interaction.user.roles]:
        await interaction.response.send_message("‚õî ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Role Admin)", ephemeral=True)
        return

    data = load_userdata()
    user_id = str(member.id)
    data.setdefault(user_id, {"balance": 0, "gacha_count": 0, "gacha_history": []})

    if action.value == "add":
        data[user_id]["balance"] += amount
        save_userdata(data)
        await interaction.response.send_message(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {amount} ‡∏û‡∏≠‡∏¢‡∏ó‡πå‡πÉ‡∏´‡πâ {member.mention}")

    elif action.value == "remove":
        data[user_id]["balance"] = max(0, data[user_id]["balance"] - amount)
        save_userdata(data)
        await interaction.response.send_message(f"üóë ‡∏•‡∏ö {amount} ‡∏û‡∏≠‡∏¢‡∏ó‡πå‡∏à‡∏≤‡∏Å {member.mention}")

    elif action.value == "history":
        history = data[user_id].get("gacha_history", [])[-5:]
        if not history:
            msg = f"üìú ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á {member.mention}"
        else:
            msg = f"üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏∏‡πà‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á {member.mention}:\n"
            msg += "\n".join(f"- `{h['timestamp']}`: {h['item']} ({h['rarity']})" for h in history)
        await interaction.response.send_message(msg)

# üîë Token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
bot.run("MTM1OTUzNDA4NDUxODU3NjE3OA.G1BHTd.rn6W785yVO0CnN8O36_lOLGexQ90Z-GLYBnMMM")

# --- Merged from gacha.py ---

import discord
from discord.ext import commands
from discord import app_commands
import json, random, os
from datetime import datetime

intents = discord.Intents.default()
bot = commands.Bot(command_prefix="!", intents=intents)

GACHA_COST = 5  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏° 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á

@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"‚úÖ ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß: {bot.user}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
def load_userdata():
    if not os.path.exists("userdata.json"):
        return {}
    with open("userdata.json", "r", encoding="utf-8") as f:
        return json.load(f)

def save_userdata(data):
    with open("userdata.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏Å‡∏≤‡∏ä‡∏≤
GACHA_POOL = [
    {"item": "1%", "rarity": "SSR", "rate": 1},
    {"item": "5%", "rarity": "SR", "rate": 5},
    {"item": "9%", "rarity": "S", "rate": 10},
    {"item": "20%", "rarity": "R", "rate": 21},
    {"item": "‡πÄ‡∏Å‡∏•‡∏∑‡∏≠", "rarity": "N", "rate": 21},
    {"item": "‡πÄ‡∏Å‡∏•‡∏∑‡∏≠", "rarity": "N", "rate": 21},
    {"item": "‡πÄ‡∏Å‡∏•‡∏∑‡∏≠", "rarity": "N", "rate": 21}
]

# ‡∏ä‡∏∑‡πà‡∏≠ role ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö
RARITY_ROLES = {
    "SSR": "1%",
    "SR": "5%",
    "S": "10%",
    "R": "30%"
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
def roll_item():
    roll = random.randint(1, 100)
    total = 0
    for i in GACHA_POOL:
        total += i["rate"]
        if roll <= total:
            return i
    return GACHA_POOL[-1]

# ‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /gacha
@bot.tree.command(name="gacha", description="‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏ä‡∏≤")
async def gacha(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    data = load_userdata()

    if user_id not in data or data[user_id]["balance"] < GACHA_COST:
        await interaction.response.send_message("‚ùå ‡∏û‡∏≠‡∏¢‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠!", ephemeral=True)
        return

    data[user_id]["balance"] -= GACHA_COST
    data[user_id]["gacha_count"] = data[user_id].get("gacha_count", 0) + 1

    result = roll_item()

    data[user_id].setdefault("gacha_history", []).append({
        "item": result["item"],
        "rarity": result["rarity"],
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

    # ‡πÅ‡∏à‡∏Å role
    rarity = result["rarity"]
    role_name = RARITY_ROLES.get(rarity)
    if role_name:
        role = discord.utils.get(interaction.guild.roles, name=role_name)
        if role:
            await interaction.user.add_roles(role)
            role_msg = f"\nüéñÔ∏è ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®: {role.mention}"
        else:
            role_msg = f"\n‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Role `{role_name}` (‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô Discord ‡∏Å‡πà‡∏≠‡∏ô)"
    else:
        role_msg = ""

    save_userdata(data)

    await interaction.response.send_message(
        f"üéâ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏ä‡∏≤‡πÑ‡∏î‡πâ: **{result['item']}** ({result['rarity']})!{role_msg}",
        ephemeral=False
    )

# ‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /multi_gacha
@bot.tree.command(name="gacha10", description="‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏ä‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
@app_commands.describe(times="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10)")
async def multi_gacha(interaction: discord.Interaction, times: int):
    # ‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    user_id = str(interaction.user.id)
    data = load_userdata()

    if times < 1 or times > 10:
        await interaction.response.send_message("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1 ‡∏ñ‡∏∂‡∏á 10", ephemeral=True)
        return

    total_cost = GACHA_COST * times
    if user_id not in data or data[user_id]["balance"] < total_cost:
        await interaction.response.send_message("‚ùå ‡∏û‡∏≠‡∏¢‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠!", ephemeral=True)
        return

    data[user_id]["balance"] -= total_cost
    data[user_id]["gacha_count"] = data[user_id].get("gacha_count", 0) + times

    pulls = []
    history = data[user_id].setdefault("gacha_history", [])
    granted_roles = set()

    for _ in range(times):
        result = roll_item()
        pulls.append(f"- **{result['item']}** ({result['rarity']})")
        history.append({
            "item": result["item"],
            "rarity": result["rarity"],
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })

        rarity = result["rarity"]
        role_name = RARITY_ROLES.get(rarity)
        if role_name:
            granted_roles.add(role_name)

    role_msgs = []
    for role_name in granted_roles:
        role = discord.utils.get(interaction.guild.roles, name=role_name)
        if role:
            await interaction.user.add_roles(role)
            role_msgs.append(f"üéñÔ∏è ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®: {role.mention}")
        else:
            role_msgs.append(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Role `{role_name}`")

    save_userdata(data)

    await interaction.response.send_message(
        f"üéâ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏ä‡∏≤ {times} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÑ‡∏î‡πâ:\n" + "\n".join(pulls) + "\n\n" + "\n".join(role_msgs),
        ephemeral=False
    )

# üîë Token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
bot.run("MTM1OTUzNDA4NDUxODU3NjE3OA.GhpMh4.Ofd1tr0JxaTyM_XtteIVURBg373qpLUUTB7kjI")